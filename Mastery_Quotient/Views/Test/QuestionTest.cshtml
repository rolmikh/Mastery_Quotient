@model Mastery_Quotient.Models.ViewTestModel
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../css/mainStyle.css">
    <link rel="stylesheet" href="../css/navigationStyle.css">
    <link rel="stylesheet" href="../css/crudStyle.css">
    <link rel="stylesheet" href="../css/TestStyle.css">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.8.1/slick.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.8.1/slick-theme.min.css">


    <script src="~/js/QuestionScript.js"></script>


    <link href="https://fonts.googleapis.com/css?family=Mulish:200,300,regular,500,600,700,800,900,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic"
          rel="stylesheet" />
    <title>Добавление вопросов</title>
    <div class="container">
        <a asp-action="MainTeacher" asp-controller="teacher">
            <img class="navigation_img" src="../images/3QpbYI-LogoMakr.png">
        </a>

        <ul class="navigation_ul">
            <li class="navigation_li"><a class="navigation_a" asp-action="News" asp-controller="Teacher">Новости</a></li>
            <li class="navigation_li"><a class="navigation_a" asp-action="MaterialsTeacher" asp-controller="Teacher">Материалы</a></li>
            <li class="navigation_li"><a class="navigation_a" asp-action="TestTeacher" asp-controller="Test">Тесты</a></li>
            <li class="navigation_li"><a class="navigation_a" asp-action="Rating" asp-controller="Teacher">Рейтинг</a></li>
        </ul>
        <ul class="navigation_ul_right">
            <li class="navigation_li_right" style="float: right">
                <a class="navigation_a_right" asp-action="TeacherWindowMaterial" asp-controller="teacher">Создать материал</a>
            </li>
            <li class="navigation_li_right" style="float: right"><a class="navigation_a_right" asp-action="TeacherWindowTest" asp-controller="Test">Создать тест</a></li>
        </ul>
        <button class="glow_button" onclick="window.location.href='@Url.Action("PersonalAccountTeacher", "teacher")'">
            Личный кабинет
        </button>
    </div>

</head>
<body>
    <main>
        <div class="h2form">

            <h3>Название теста</h3>
            <h3>Дата создания теста</h3>
            @* <h3>@Model.Discipline.Find(n => n.IdDiscipline == @Model.disciplineEmployees).NameDiscipline</h3> *@
            <h3>Преподаватель</h3>
            <h3>Параметры теста</h3>
            <h3>Срок сдачи</h3>

        </div>
        <div class="h2form">
            
            <h3>@Model.Test.NameTest</h3>
            <h3>@Model.Test.DateCreatedTest</h3>
            @* <h3>@Model.Discipline.Find(n => n.IdDiscipline == @Model.disciplineEmployees).NameDiscipline</h3> *@
            <h3>@Model.Employee.SurnameEmployee @Model.Employee.NameEmployee @Model.Employee.MiddleNameEmployee</h3>
            <h3>@Model.Parameters.Find(n => n.IdTestParameter == @Model.Test.TestParameterId).NameParameter: @Model.Parameters.Find(n => n.IdTestParameter == @Model.Test.TestParameterId).ValueParameter</h3>
            <h3>@Model.Test.Deadline</h3>

        </div>
        @if (@Model.Test.Active == 1)
        {
            <div class="slider">
                <div class="formSlider">
                    <h2>Добавление вопроса</h2>
                    <form asp-antiforgery="true" asp-action="QuestionInput" asp-controller="Test" method="post">
                        <h3>Вопрос с письменным вариантом ответа</h3>
                        <input name="numberQuestion" class="CrudInput" type="number" placeholder="Номер вопроса" />
                        <input name="nameQuestion" class="CrudInput" placeholder="Название вопроса" />

                        <input name="typeQuestion" hidden class="CrudInput" value="Письменный вопрос" placeholder="Тип вопроса" />



                        <input type="submit" class="newInput" value="Добавить вопрос" />
                    </form>
                </div>
                <div class="formSlider">
                    <h2>Добавление вопроса</h2>
                    <form asp-antiforgery="true" asp-action="QuestionOne" asp-controller="Test" method="post">
                        <h3>Вопрос с одним вариантом ответа</h3>
                        <input name="numberQuestion" class="CrudInput" type="number" placeholder="Номер вопроса" />
                        <input name="nameQuestion" class="CrudInput" placeholder="Название вопроса" />

                        <input name="typeQuestion" hidden class="CrudInput" value="Вопрос с одним вариантом ответа" placeholder="Тип вопроса" />

                        <div id="answerOptionsRadio" class="formInput">
                        </div>
                        <button type="button" id="addAnswerOptionRadio" class="buttonPlus">+</button>


                        <input type="submit" class="newInput" value="Добавить вопрос" />

                    </form>
                </div>

                <div class="formSlider">
                    <h2>Добавление вопроса</h2>
                    <form asp-antiforgery="true" asp-action="QuestionTwo" asp-controller="Test" method="post">
                        <h3>Вопрос с несколькими вариантами ответа</h3>
                        <input name="numberQuestion" class="CrudInput" type="number" placeholder="Номер вопроса" />
                        <input name="nameQuestion" class="CrudInput" placeholder="Название вопроса" />

                        <input name="typeQuestion" hidden class="CrudInput" value="Вопрос с несколькими вариантами ответа" placeholder="Тип вопроса" />

                        <div id="answerOptionsCheck" class="formInput">
                        </div>
                        <button type="button" id="addAnswerOptionCheck" class="buttonPlus">+</button>

                        <input type="submit" class="newInput" value="Добавить вопрос" />
                    </form>
                </div>
            </div>
        }
        


        @foreach (var question in Model.TestQuestion)
        {
            var questionNumber = Model.Question.Find(n => n.IdQuestion == question.QuestionId).NumberQuestion;
            var questionName = Model.Question.Find(n => n.IdQuestion == question.QuestionId).NameQuestion;
            var questionTypeID = Model.Question.Find(n => n.IdQuestion == question.QuestionId).TypeQuestionId;

            var questionID = Model.Question.Find(n => n.IdQuestion == question.QuestionId).IdQuestion;

            <div class="formAnswer">
                <div class="flexDiv">
                    <div class="number">
                        @questionNumber
                    </div>
                    <div class="name">
                        @questionName
                    </div>

                </div>
                
                
                @if (questionTypeID == 1)
                {
                    <textarea class="textareaForm" name="AnswerOptionViewModels[@questionID].AnswerOption" placeholder="Введите ответ"></textarea>
                }
                @if (questionTypeID == 2)
                {
                    <div class="AnswerForm">
                        @foreach (var answer in Model.QuestionAnswerOption.Where(n => n.QuestionId == questionID))
                        {
                            var answerContent = Model.AnswerOption.Find(n => n.IdAnswerOptions == answer.AnswerOptionsId).ContentAnswer;

                            <div class="Answer">
                                <input type="radio" name="AnswerOptionViewModels[@questionID].SelectedAnswer" value="@answer.AnswerOptionsId" />
                                @answerContent
                            </div>
                        }
                    </div>
                    
                }
                @if (questionTypeID == 3)
                {
                    <div class="AnswerForm">
                        @foreach (var answer in Model.QuestionAnswerOption.Where(n => n.QuestionId == questionID))
                        {
                            var answerContent = Model.AnswerOption.Find(n => n.IdAnswerOptions == answer.AnswerOptionsId).ContentAnswer;

                            <div class="Answer">
                                <input type="checkbox" name="AnswerOptionViewModels[@questionID].SelectedAnswer" value="@answer.AnswerOptionsId" />
                                @answerContent
                            </div>
                        }
                    </div>
                    
                }
            </div>
        }
        @if (@Model.Test.Active == 1)
        {
            <form asp-antiforgery="true" asp-action="TestPublication" asp-controller="Test" method="post">
                <input type="submit" class="newInput" value="Опубликовать тестирование" />

            </form>
        }




        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.8.1/slick.min.js"></script>
        <script>
            $(document).ready(function () {
                // Инициализация слайдера
                $('.slider').slick({
                    infinite: true, // Бесконечный слайдер
                    slidesToShow: 1, // Отображение одного слайда за раз
                    slidesToScroll: 1, // Прокрутка одного слайда за раз
                    dots: true, // Включение точек для навигации
                    pauseOnFocus: true // Пауза при фокусе
                });
            });
        </script>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                const addAnswerOptionButton = document.getElementById('addAnswerOptionRadio');
                const answerOptionsContainer = document.getElementById('answerOptionsRadio');
                let answerOptionIndex = 0;  // Начальное значение индекса

                addAnswerOptionButton.addEventListener('click', function () {
                    const answerOptionDiv = document.createElement('div');
                    answerOptionDiv.classList.add('answer-option');

                    const answerOptionInput = document.createElement('input');
                    answerOptionInput.type = 'text';
                    answerOptionInput.name = 'AnswerOptionViewModels[' + answerOptionIndex + '].AnswerOption';

                    const correctAnswerInput = document.createElement('input');
                    correctAnswerInput.type = 'hidden';
                    correctAnswerInput.name = 'AnswerOptionViewModels[' + answerOptionIndex + '].IsCorrectAnswer';
                    correctAnswerInput.value = 'false';  // Устанавливаем значение false по умолчанию

                    const radioInput = document.createElement('input');
                    radioInput.type = 'radio';
                    radioInput.name = 'correctAnswerRadio';  // Устанавливаем одинаковое имя для всех радиокнопок
                    radioInput.value = answerOptionIndex.toString(); // Устанавливаем значение радиокнопки равным индексу
                    radioInput.addEventListener('click', function () {
                        const isChecked = this.checked;
                        const allCorrectAnswerInputs = document.querySelectorAll('input[name^="AnswerOptionViewModels"][name$="IsCorrectAnswer"]');
                        allCorrectAnswerInputs.forEach(function (input) {
                            input.value = 'false';
                        });
                        correctAnswerInput.value = isChecked ? 'true' : 'false';
                    });

                    const removeButton = document.createElement('button');
                    removeButton.type = 'button';
                    removeButton.classList.add('remove-answer-option', "buttonPlus");
                    removeButton.textContent = '-';
                    removeButton.addEventListener('click', function () {
                        answerOptionsContainer.removeChild(answerOptionDiv);
                        answerOptionIndex--;  // Уменьшаем индекс при удалении поля
                    });

                    answerOptionDiv.appendChild(answerOptionInput);
                    answerOptionDiv.appendChild(correctAnswerInput);
                    answerOptionDiv.appendChild(radioInput);
                    answerOptionDiv.appendChild(removeButton);

                    answerOptionsContainer.appendChild(answerOptionDiv);

                    answerOptionIndex++; // Увеличиваем индекс для нового варианта ответа
                });
            });
        </script>

        <script>
            document.addEventListener('DOMContentLoaded', function () {
                const addAnswerOptionButton = document.getElementById('addAnswerOptionCheck');
                const answerOptionsContainer = document.getElementById('answerOptionsCheck');
                let answerOptionIndex = 0;  // Начальное значение индекса

                addAnswerOptionButton.addEventListener('click', function () {
                    const answerOptionDivCheck = document.createElement('div');
                    answerOptionDivCheck.classList.add('answer-option');

                    const answerOptionInputCheck = document.createElement('input');
                    answerOptionInputCheck.type = 'text';
                    answerOptionInputCheck.name = 'AnswerOptionViewModels[' + answerOptionIndex + '].AnswerOption';


                    const correctAnswerInputCheck = document.createElement('input');
                    correctAnswerInputCheck.type = 'hidden';
                    correctAnswerInputCheck.name = 'AnswerOptionViewModels[' + answerOptionIndex + '].IsCorrectAnswer';
                    correctAnswerInputCheck.value = 'false';  // Устанавливаем значение false по умолчанию

                    const checkboxInputCheck = document.createElement('input');
                    checkboxInputCheck.type = 'checkbox';
                    checkboxInputCheck.name = 'correctAnswerCheck';  // Устанавливаем одинаковое имя для всех чекбоксов
                    checkboxInputCheck.value = answerOptionIndex.toString(); // Устанавливаем значение чекбокса равным индексу
                    checkboxInputCheck.addEventListener('change', function () {
                        const isChecked = this.checked;
                        correctAnswerInputCheck.value = isChecked ? 'true' : 'false';
                    });

                    const removeButton = document.createElement('button');
                    removeButton.type = 'button';
                    removeButton.classList.add('remove-answer-option', "buttonPlus");
                    removeButton.textContent = '-';
                    removeButton.addEventListener('click', function () {
                        answerOptionsContainer.removeChild(answerOptionDivCheck);
                        answerOptionIndex--;  // Уменьшаем индекс при удалении поля
                    });

                    answerOptionDivCheck.appendChild(answerOptionInputCheck);
                    answerOptionDivCheck.appendChild(correctAnswerInputCheck);
                    answerOptionDivCheck.appendChild(checkboxInputCheck);
                    answerOptionDivCheck.appendChild(removeButton);

                    answerOptionsContainer.appendChild(answerOptionDivCheck);

                    answerOptionIndex++; // Увеличиваем индекс для нового варианта ответа
                });
            });
        </script>

    </main>

</body>
</html>